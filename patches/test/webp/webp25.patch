# HG changeset patch
# User xunxun1982
# Date 1418716200 -28800
#      Tue Dec 16 15:50:00 2014 +0800
# Node ID 48f61fde85b5b7d72192fc6be10d593509676891
# Parent  ecaf1c5a310c37a7123f0da82b3becd50cc8068f
webp-25

diff -r ecaf1c5a310c -r 48f61fde85b5 browser/components/BrowserComponents.manifest
--- a/browser/components/BrowserComponents.manifest	Mon Aug 05 10:56:53 2013 -0700
+++ b/browser/components/BrowserComponents.manifest	Tue Dec 16 15:50:00 2014 +0800
@@ -19,6 +19,7 @@
 contract @mozilla.org/uriloader/content-handler;1?type=image/x-icon {5d0ce354-df01-421a-83fb-7ead0990c24e} application={ec8030f7-c20a-464f-9b0e-13a3a9e97384}
 contract @mozilla.org/uriloader/content-handler;1?type=image/vnd.microsoft.icon {5d0ce354-df01-421a-83fb-7ead0990c24e} application={ec8030f7-c20a-464f-9b0e-13a3a9e97384}
 contract @mozilla.org/uriloader/content-handler;1?type=application/http-index-format {5d0ce354-df01-421a-83fb-7ead0990c24e} application={ec8030f7-c20a-464f-9b0e-13a3a9e97384}
+contract @mozilla.org/uriloader/content-handler;1?type=image/webp {5d0ce354-df01-421a-83fb-7ead0990c24e} application={ec8030f7-c20a-464f-9b0e-13a3a9e97384}
 category command-line-handler m-browser @mozilla.org/browser/clh;1 application={ec8030f7-c20a-464f-9b0e-13a3a9e97384}
 category command-line-handler x-default @mozilla.org/browser/final-clh;1 application={ec8030f7-c20a-464f-9b0e-13a3a9e97384}
 category command-line-validator b-browser @mozilla.org/browser/clh;1 application={ec8030f7-c20a-464f-9b0e-13a3a9e97384}
diff -r ecaf1c5a310c -r 48f61fde85b5 config/Makefile.in
--- a/config/Makefile.in	Mon Aug 05 10:56:53 2013 -0700
+++ b/config/Makefile.in	Tue Dec 16 15:50:00 2014 +0800
@@ -98,6 +98,7 @@
 		-DMOZ_NATIVE_JPEG=$(MOZ_NATIVE_JPEG) \
 		-DMOZ_NATIVE_LIBEVENT=$(MOZ_NATIVE_LIBEVENT) \
 		-DMOZ_NATIVE_LIBVPX=$(MOZ_NATIVE_LIBVPX) \
+		-DMOZ_NATIVE_LIBWEBP=$(MOZ_NATIVE_LIBWEBP) \
 		$(srcdir)/system-headers | $(PERL) $(topsrcdir)/nsprpub/config/make-system-wrappers.pl system_wrappers
 	$(INSTALL) system_wrappers $(DIST)
 
diff -r ecaf1c5a310c -r 48f61fde85b5 config/config.mk
--- a/config/config.mk	Mon Aug 05 10:56:53 2013 -0700
+++ b/config/config.mk	Tue Dec 16 15:50:00 2014 +0800
@@ -371,7 +371,7 @@
 JAVA_DIST_DIR = $(DEPTH)/$(JAVA_GEN_DIR)
 JAVA_IFACES_PKG_NAME = org/mozilla/interfaces
 
-OS_INCLUDES += $(MOZ_JPEG_CFLAGS) $(MOZ_PNG_CFLAGS) $(MOZ_ZLIB_CFLAGS)
+OS_INCLUDES += $(MOZ_JPEG_CFLAGS) $(MOZ_PNG_CFLAGS) $(MOZ_ZLIB_CFLAGS) $(MOZ_WEBP_CFLAGS)
 
 # NSPR_CFLAGS and NSS_CFLAGS must appear ahead of OS_INCLUDES to avoid Linux
 # builds wrongly picking up system NSPR/NSS header files.
diff -r ecaf1c5a310c -r 48f61fde85b5 configure.in
--- a/configure.in	Mon Aug 05 10:56:53 2013 -0700
+++ b/configure.in	Tue Dec 16 15:50:00 2014 +0800
@@ -52,6 +52,7 @@
 dnl ========================================================
 MOZJPEG=62
 MOZPNG=10517
+MOZWEBP=030
 NSPR_VERSION=4
 NSS_VERSION=3
 
@@ -911,6 +912,8 @@
 MOZ_BZ2_LIBS='$(call EXPAND_LIBNAME_PATH,bz2,$(DEPTH)/modules/libbz2/src)'
 MOZ_PNG_CFLAGS=
 MOZ_PNG_LIBS='$(call EXPAND_LIBNAME_PATH,mozpng,$(DEPTH)/media/libpng)'
+MOZ_WEBP_CFLAGS=
+MOZ_WEBP_LIBS='$(call EXPAND_LIBNAME_PATH,mozwebp,$(DEPTH)/media/libwebp/src)'
 
 MOZ_JS_STATIC_LIBS='$(call EXPAND_LIBNAME_PATH,js_static,$(LIBXUL_DIST)/lib)'
 MOZ_JS_SHARED_LIBS='$(call EXPAND_LIBNAME_PATH,mozjs,$(LIBXUL_DIST)/lib)'
@@ -4029,6 +4032,35 @@
     MOZ_BZ2_LIBS="-L${BZ2_DIR}/lib ${MOZ_BZ2_LIBS}"
 fi
 
+dnl system WEBP Support
+dnl ========================================================
+MOZ_ARG_WITH_STRING(system-webp,
+[  --with-system-webp[=PFX]
+                          Use system libwebp [installed at prefix PFX]],
+    WEBP_DIR=$withval)
+
+_SAVE_CFLAGS=$CFLAGS
+_SAVE_LDFLAGS=$LDFLAGS
+_SAVE_LIBS=$LIBS
+if test -n "${WEBP_DIR}" -a "${WEBP_DIR}" != "yes"; then
+    CFLAGS="-I${WEBP_DIR}/include $CFLAGS"
+    LDFLAGS="-L${WEBP_DIR}/lib $LDFLAGS"
+fi
+if test -z "$WEBP_DIR" -o "$WEBP_DIR" = no; then
+    MOZ_NATIVE_WEBP=
+else
+    AC_CHECK_LIB(webp, WebPGetDecoderVersion, [MOZ_NATIVE_WEBP=1 MOZ_WEBP_LIBS="-lwebp"],
+        [MOZ_NATIVE_WEBP= MOZ_WEBP_CFLAGS= MOZ_WEBP_LIBS=])
+fi
+CFLAGS=$_SAVE_CFLAGS
+LDFLAGS=$_SAVE_LDFLAGS
+LIBS=$_SAVE_LIBS
+
+if test "${WEBP_DIR}" -a -d "${WEBP_DIR}" -a "$MOZ_NATIVE_WEBP" = 1; then
+    MOZ_WEBP_CFLAGS="-I${WEBP_DIR}/include"
+    MOZ_WEBP_LIBS="-L${WEBP_DIR}/lib ${MOZ_WEBP_LIBS}"
+fi
+
 dnl system PNG Support
 dnl ========================================================
 MOZ_ARG_WITH_STRING(system-png,
@@ -4162,6 +4194,8 @@
 MOZ_MEDIA_PLUGINS=
 MOZ_MEDIA_NAVIGATOR=
 MOZ_OMX_PLUGIN=
+MOZ_WEBP=1
+MOZ_NATIVE_LIBWEBP=
 MOZ_VP8=
 MOZ_VP8_ERROR_CONCEALMENT=
 MOZ_VP8_ENCODER=
@@ -5539,6 +5573,10 @@
 AC_SUBST(MOZ_LIBVPX_CFLAGS)
 AC_SUBST(MOZ_LIBVPX_LIBS)
 
+if test "$MOZ_WEBP"; then
+    AC_DEFINE(MOZ_WEBP)
+fi
+
 if test "$MOZ_WEBM"; then
     MOZ_CUBEB=1
     if test "$MOZ_SAMPLE_TYPE_FLOAT32"; then
@@ -8809,6 +8847,8 @@
 AC_SUBST(MOZ_BZ2_LIBS)
 AC_SUBST(MOZ_PNG_CFLAGS)
 AC_SUBST(MOZ_PNG_LIBS)
+AC_SUBST(MOZ_WEBP_CFLAGS)
+AC_SUBST(MOZ_WEBP_LIBS)
 
 AC_SUBST(NSPR_CFLAGS)
 AC_SUBST(NSPR_LIBS)
@@ -8900,6 +8940,7 @@
 AC_SUBST(MOZ_VORBIS)
 AC_SUBST(MOZ_TREMOR)
 AC_SUBST(MOZ_OPUS)
+AC_SUBST(MOZ_WEBP)
 AC_SUBST(MOZ_WEBM)
 AC_SUBST(MOZ_DASH)
 AC_SUBST(MOZ_WMF)
diff -r ecaf1c5a310c -r 48f61fde85b5 image/build/Makefile.in
--- a/image/build/Makefile.in	Mon Aug 05 10:56:53 2013 -0700
+++ b/image/build/Makefile.in	Tue Dec 16 15:50:00 2014 +0800
@@ -22,6 +22,7 @@
 		-I$(srcdir)/../encoders/ico \
 		-I$(srcdir)/../encoders/png \
 		-I$(srcdir)/../encoders/jpeg \
+		-I$(srcdir)/../encoders/webp \
 		-I$(srcdir)/../encoders/bmp \
 		$(NULL)
 
@@ -31,8 +32,10 @@
 		../encoders/ico/$(LIB_PREFIX)imgicoe_s.$(LIB_SUFFIX) \
 		../encoders/png/$(LIB_PREFIX)imgpnge_s.$(LIB_SUFFIX) \
 		../encoders/jpeg/$(LIB_PREFIX)imgjpege_s.$(LIB_SUFFIX) \
+		../encoders/webp/$(LIB_PREFIX)imgwebpe_s.$(LIB_SUFFIX) \
 		../encoders/bmp/$(LIB_PREFIX)imgbmpe_s.$(LIB_SUFFIX) \
 		$(NULL)
 
 include $(topsrcdir)/config/rules.mk
 
+CXXFLAGS += -IE:/Mozilla/3rdLib/webp/source/build/src
diff -r ecaf1c5a310c -r 48f61fde85b5 image/build/nsImageModule.cpp
--- a/image/build/nsImageModule.cpp	Mon Aug 05 10:56:53 2013 -0700
+++ b/image/build/nsImageModule.cpp	Tue Dec 16 15:50:00 2014 +0800
@@ -19,6 +19,7 @@
 #include "nsPNGEncoder.h"
 #include "nsJPEGEncoder.h"
 #include "nsBMPEncoder.h"
+#include "nsWEBPEncoder.h"
 
 // objects that just require generic constructors
 using namespace mozilla::image;
@@ -30,6 +31,7 @@
 NS_GENERIC_FACTORY_CONSTRUCTOR(nsJPEGEncoder)
 NS_GENERIC_FACTORY_CONSTRUCTOR(nsPNGEncoder)
 NS_GENERIC_FACTORY_CONSTRUCTOR(nsBMPEncoder)
+NS_GENERIC_FACTORY_CONSTRUCTOR(nsWEBPEncoder)
 NS_DEFINE_NAMED_CID(NS_IMGLOADER_CID);
 NS_DEFINE_NAMED_CID(NS_IMGREQUESTPROXY_CID);
 NS_DEFINE_NAMED_CID(NS_IMGTOOLS_CID);
@@ -37,6 +39,7 @@
 NS_DEFINE_NAMED_CID(NS_JPEGENCODER_CID);
 NS_DEFINE_NAMED_CID(NS_PNGENCODER_CID);
 NS_DEFINE_NAMED_CID(NS_BMPENCODER_CID);
+NS_DEFINE_NAMED_CID(NS_WEBPENCODER_CID);
 
 static const mozilla::Module::CIDEntry kImageCIDs[] = {
   { &kNS_IMGLOADER_CID, false, NULL, imgLoaderConstructor, },
@@ -46,6 +49,7 @@
   { &kNS_JPEGENCODER_CID, false, NULL, nsJPEGEncoderConstructor, },
   { &kNS_PNGENCODER_CID, false, NULL, nsPNGEncoderConstructor, },
   { &kNS_BMPENCODER_CID, false, NULL, nsBMPEncoderConstructor, },
+  { &kNS_WEBPENCODER_CID, false, NULL, nsWEBPEncoderConstructor, },
   { NULL }
 };
 
@@ -58,6 +62,7 @@
   { "@mozilla.org/image/encoder;2?type=" IMAGE_JPEG, &kNS_JPEGENCODER_CID },
   { "@mozilla.org/image/encoder;2?type=" IMAGE_PNG, &kNS_PNGENCODER_CID },
   { "@mozilla.org/image/encoder;2?type=" IMAGE_BMP, &kNS_BMPENCODER_CID },
+  { "@mozilla.org/image/encoder;2?type=" IMAGE_WEBP, &kNS_WEBPENCODER_CID },
   { NULL }
 };
 
@@ -73,6 +78,7 @@
   { "Gecko-Content-Viewers", IMAGE_ICON_MS, "@mozilla.org/content/document-loader-factory;1" },
   { "Gecko-Content-Viewers", IMAGE_PNG, "@mozilla.org/content/document-loader-factory;1" },
   { "Gecko-Content-Viewers", IMAGE_X_PNG, "@mozilla.org/content/document-loader-factory;1" },
+  { "Gecko-Content-Viewers", IMAGE_WEBP, "@mozilla.org/content/document-loader-factory;1" },
   { "content-sniffing-services", "@mozilla.org/image/loader;1", "@mozilla.org/image/loader;1" },
   { NULL }
 };
diff -r ecaf1c5a310c -r 48f61fde85b5 image/decoders/Makefile.in
--- a/image/decoders/Makefile.in	Mon Aug 05 10:56:53 2013 -0700
+++ b/image/decoders/Makefile.in	Tue Dec 16 15:50:00 2014 +0800
@@ -27,3 +27,4 @@
 
 include $(topsrcdir)/config/rules.mk
 
+CXXFLAGS += -IE:/Mozilla/3rdLib/webp/source/build/src
diff -r ecaf1c5a310c -r 48f61fde85b5 image/decoders/moz.build
--- a/image/decoders/moz.build	Mon Aug 05 10:56:53 2013 -0700
+++ b/image/decoders/moz.build	Tue Dec 16 15:50:00 2014 +0800
@@ -32,6 +32,7 @@
     'nsIconDecoder.cpp',
     'nsJPEGDecoder.cpp',
     'nsPNGDecoder.cpp',
+    'nsWEBPDecoder.cpp',
 ]
 
 LIBRARY_NAME = 'imgdecoders_s'
diff -r ecaf1c5a310c -r 48f61fde85b5 image/decoders/nsWEBPDecoder.cpp
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/image/decoders/nsWEBPDecoder.cpp	Tue Dec 16 15:50:00 2014 +0800
@@ -0,0 +1,162 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "ImageLogging.h"
+#include "nsWEBPDecoder.h"
+
+#include "nsIInputStream.h"
+
+#include "nspr.h"
+#include "nsCRT.h"
+#include "gfxColor.h"
+
+#include "gfxPlatform.h"
+
+namespace mozilla {
+namespace image {
+
+#if defined(PR_LOGGING)
+static PRLogModuleInfo *gWEBPLog = PR_NewLogModule("WEBPDecoder");
+static PRLogModuleInfo *gWEBPDecoderAccountingLog =
+                        PR_NewLogModule("WEBPDecoderAccounting");
+#else
+#define gWEBPlog
+#define gWEBPDecoderAccountingLog
+#endif
+
+nsWEBPDecoder::nsWEBPDecoder(RasterImage &aImage)
+ : Decoder(aImage)
+{
+  PR_LOG(gWEBPDecoderAccountingLog, PR_LOG_DEBUG,
+         ("nsWEBPDecoder::nsWEBPDecoder: Creating WEBP decoder %p",
+          this));
+}
+
+nsWEBPDecoder::~nsWEBPDecoder()
+{
+  PR_LOG(gWEBPDecoderAccountingLog, PR_LOG_DEBUG,
+         ("nsWEBPDecoder::~nsWEBPDecoder: Destroying WEBP decoder %p",
+          this));
+}
+
+
+void
+nsWEBPDecoder::InitInternal()
+{
+  if (!WebPInitDecBuffer(&mDecBuf)) {
+    PostDecoderError(NS_ERROR_FAILURE);
+    return;
+  }
+  mLastLine = 0;
+  mDecBuf.colorspace = MODE_rgbA;
+  mDecoder = WebPINewDecoder(&mDecBuf);
+  if (!mDecoder) {
+    PostDecoderError(NS_ERROR_FAILURE);
+  }
+}
+
+void
+nsWEBPDecoder::FinishInternal()
+{
+  // Flush the Decoder and let it free the output image buffer.
+  WebPIDelete(mDecoder);
+  WebPFreeDecBuffer(&mDecBuf);
+
+  // We should never make multiple frames
+  NS_ABORT_IF_FALSE(GetFrameCount() <= 1, "Multiple WebP frames?");
+
+  // Send notifications if appropriate
+  if (!IsSizeDecode() && (GetFrameCount() == 1)) {
+    PostFrameStop();
+    PostDecodeDone();
+  }
+}
+
+void
+nsWEBPDecoder::WriteInternal(const char *aBuffer, uint32_t aCount)
+{
+  NS_ABORT_IF_FALSE(!HasError(), "Shouldn't call WriteInternal after error!");
+
+  const uint8_t* buf = (const uint8_t*)aBuffer;
+  VP8StatusCode rv = WebPIAppend(mDecoder, buf, aCount);
+  if (rv == VP8_STATUS_OUT_OF_MEMORY) {
+    PostDecoderError(NS_ERROR_OUT_OF_MEMORY);
+    return;
+  } else if (rv == VP8_STATUS_INVALID_PARAM ||
+             rv == VP8_STATUS_BITSTREAM_ERROR) {
+    PostDataError();
+    return;
+  } else if (rv == VP8_STATUS_UNSUPPORTED_FEATURE ||
+             rv == VP8_STATUS_USER_ABORT) {
+    PostDecoderError(NS_ERROR_FAILURE);
+    return;
+  }
+
+  // Catch any remaining erroneous return value.
+  if (rv != VP8_STATUS_OK && rv != VP8_STATUS_SUSPENDED) {
+    PostDecoderError(NS_ERROR_FAILURE);
+    return;
+  }
+
+  int lastLineRead = -1;
+  int height = 0;
+  int width = 0;
+  int stride = 0;
+
+  mData = WebPIDecGetRGB(mDecoder, &lastLineRead, &width, &height, &stride);
+
+  if (lastLineRead == -1 || !mData)
+    return;
+
+  if (width <= 0 || height <= 0) {
+    PostDataError();
+    return;
+  }
+
+  if (!HasSize())
+    PostSize(width, height);
+
+  if (IsSizeDecode())
+    return;
+
+  uint32_t imagelength;
+  // First incremental Image data chunk. Special handling required.
+  if (mLastLine == 0 && lastLineRead > 0) {
+    imgFrame* aFrame;
+    nsresult res = mImage.EnsureFrame(0, 0, 0, width, height,
+                                       gfxASurface::ImageFormatARGB32,
+                                       (uint8_t**)&mImageData, &imagelength, &aFrame);
+    if (NS_FAILED(res) || !mImageData) {
+      PostDecoderError(NS_ERROR_FAILURE);
+      return;
+    }
+  }
+
+  if (!mImageData) {
+    PostDecoderError(NS_ERROR_FAILURE);
+    return;
+  }
+
+  if (lastLineRead > mLastLine) {
+    for (int line = mLastLine; line < lastLineRead; line++) {
+      uint32_t *cptr32 = (uint32_t*)(mImageData + (line * width));
+      uint8_t *cptr8 = mData + (line * stride);
+      for (int pix = 0; pix < width; pix++, cptr8 += 4) {
+	// if((cptr8[3] != 0) && (cptr8[0] != 0) && (cptr8[1] != 0) && (cptr8[2] != 0))
+	   *cptr32++ = gfxPackedPixel(cptr8[3], cptr8[0], cptr8[1], cptr8[2]);
+      }
+    }
+
+    // Invalidate
+    nsIntRect r(0, mLastLine, width, lastLineRead);
+    PostInvalidation(r);
+  }
+
+  mLastLine = lastLineRead;
+  return;
+}
+
+} // namespace imagelib
+} // namespace mozilla
+
diff -r ecaf1c5a310c -r 48f61fde85b5 image/decoders/nsWEBPDecoder.h
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/image/decoders/nsWEBPDecoder.h	Tue Dec 16 15:50:00 2014 +0800
@@ -0,0 +1,45 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#ifndef nsWEBPDecoder_h__
+#define nsWEBPDecoder_h__
+
+#include "Decoder.h"
+
+#include "nsCOMPtr.h"
+
+extern "C" {
+#include "webp/decode.h"
+}
+
+namespace mozilla {
+namespace image {
+class RasterImage;
+
+//////////////////////////////////////////////////////////////////////
+// nsWEBPDecoder Definition
+
+class nsWEBPDecoder : public Decoder
+{
+public:
+  nsWEBPDecoder(RasterImage &aImage);
+  virtual ~nsWEBPDecoder();
+
+  virtual void InitInternal();
+  virtual void WriteInternal(const char* aBuffer, uint32_t aCount);
+  virtual void FinishInternal();
+public:
+  WebPDecBuffer mDecBuf;   
+  WebPIDecoder *mDecoder;  
+  uint8_t *mData;          // Pointer to WebP-decoded data.
+  uint32_t *mImageData;     // Pointer to RGBA image buffer (allocated by Image Frame).
+  int mLastLine;           // Last image scan-line read so far.
+
+};
+
+} // namespace image
+} // namespace mozilla
+
+#endif // nsWEBPDecoder_h__
+
diff -r ecaf1c5a310c -r 48f61fde85b5 image/encoders/jpeg/nsJPEGEncoder.cpp
--- a/image/encoders/jpeg/nsJPEGEncoder.cpp	Mon Aug 05 10:56:53 2013 -0700
+++ b/image/encoders/jpeg/nsJPEGEncoder.cpp	Tue Dec 16 15:50:00 2014 +0800
@@ -23,7 +23,7 @@
 };
 
 nsJPEGEncoder::nsJPEGEncoder() : mFinished(false),
-                                 mImageBuffer(nullptr), mImageBufferSize(0),
+				 mImageBuffer(nullptr), mImageBufferSize(0),
                                  mImageBufferUsed(0), mImageBufferReadPoint(0),
                                  mCallback(nullptr),
                                  mCallbackTarget(nullptr), mNotifyThreshold(0),
diff -r ecaf1c5a310c -r 48f61fde85b5 image/encoders/moz.build
--- a/image/encoders/moz.build	Mon Aug 05 10:56:53 2013 -0700
+++ b/image/encoders/moz.build	Tue Dec 16 15:50:00 2014 +0800
@@ -8,5 +8,6 @@
     'ico',
     'png',
     'jpeg',
+    'webp',
     'bmp',
 ]
diff -r ecaf1c5a310c -r 48f61fde85b5 image/encoders/webp/Makefile.in
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/image/encoders/webp/Makefile.in	Tue Dec 16 15:50:00 2014 +0800
@@ -0,0 +1,27 @@
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+DEPTH		= @DEPTH@
+topsrcdir	= @top_srcdir@
+srcdir		= @srcdir@
+VPATH		= @srcdir@
+
+include $(DEPTH)/config/autoconf.mk
+
+LIBRARY_NAME	= imgwebpe_s
+MODULE_NAME	= imgEncoderWEBPModule
+LIBXUL_LIBRARY = 1
+FAIL_ON_WARNINGS = 1
+
+EXPORTS_NAMESPACES = imgwebpe
+
+EXPORTS_imgwebpe = \
+	nsWEBPEncoder.h \
+	$(NULL)
+
+CPPSRCS		= nsWEBPEncoder.cpp
+
+include $(topsrcdir)/config/rules.mk
+
+CXXFLAGS += -IE:/Mozilla/3rdLib/webp/source/build/src
diff -r ecaf1c5a310c -r 48f61fde85b5 image/encoders/webp/moz.build
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/image/encoders/webp/moz.build	Tue Dec 16 15:50:00 2014 +0800
@@ -0,0 +1,7 @@
+# -*- Mode: python; c-basic-offset: 4; indent-tabs-mode: nil; tab-width: 40 -*-
+# vim: set filetype=python:
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+
diff -r ecaf1c5a310c -r 48f61fde85b5 image/encoders/webp/nsWEBPEncoder.cpp
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/image/encoders/webp/nsWEBPEncoder.cpp	Tue Dec 16 15:50:00 2014 +0800
@@ -0,0 +1,376 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "nsCRT.h"
+#include "nsWEBPEncoder.h"
+#include "prprf.h"
+#include "nsString.h"
+#include "nsStreamUtils.h"
+
+using namespace mozilla;
+
+NS_IMPL_ISUPPORTS3(nsWEBPEncoder, imgIEncoder, nsIInputStream, nsIAsyncInputStream)
+
+nsWEBPEncoder::nsWEBPEncoder() : picture(), config(), memory_writer(),
+				 mFinished(false),
+				 mImageBuffer(nullptr), mImageBufferSize(0),
+                                 mImageBufferUsed(0), mImageBufferReadPoint(0),
+                                 mCallback(nullptr),
+                                 mCallbackTarget(nullptr), mNotifyThreshold(0),
+                                 mReentrantMonitor("nsWEBPEncoder.mReentrantMonitor")
+{
+}
+
+nsWEBPEncoder::~nsWEBPEncoder()
+{
+  if (mImageBuffer) {
+    moz_free(mImageBuffer);
+    mImageBuffer = nullptr;
+  }
+}
+
+NS_IMETHODIMP nsWEBPEncoder::InitFromData(const uint8_t* aData,
+                                          uint32_t aLength, // (unused, req'd by JS)
+                                          uint32_t aWidth,
+                                          uint32_t aHeight,
+                                          uint32_t aStride,
+                                          uint32_t aInputFormat,
+                                          const nsAString& aOutputOptions)
+{
+  NS_ENSURE_ARG(aData);
+  nsresult rv;
+
+  rv = StartImageEncode(aWidth, aHeight, aInputFormat, aOutputOptions);
+  if (!NS_SUCCEEDED(rv))
+    return rv;
+
+  rv = AddImageFrame(aData, aLength, aWidth, aHeight, aStride,
+                     aInputFormat, aOutputOptions);
+  if (!NS_SUCCEEDED(rv))
+    return rv;
+
+  rv = EndImageEncode();
+
+  return rv;
+}
+
+NS_IMETHODIMP nsWEBPEncoder::StartImageEncode(uint32_t aWidth,
+                                              uint32_t aHeight,
+                                              uint32_t aInputFormat,
+                                              const nsAString& aOutputOptions)
+{
+  // can't initialize more than once
+  if (mImageBuffer != nullptr)
+    return NS_ERROR_ALREADY_INITIALIZED;
+
+  // validate input format
+  if (aInputFormat != INPUT_FORMAT_RGB &&
+      aInputFormat != INPUT_FORMAT_RGBA &&
+      aInputFormat != INPUT_FORMAT_HOSTARGB)
+    return NS_ERROR_INVALID_ARG;
+
+  // Initializing webp needs
+  /* WebPPicture picture;
+  WebPConfig config;
+  WebPMemoryWriter memory_writer; */
+  
+  WebPMemoryWriterInit(&memory_writer);
+  
+  // Checking initialization
+  if (!WebPConfigInit(&config) || !WebPPictureInit(&picture))
+	return NS_ERROR_FAILURE; 
+
+  picture.width = aWidth;
+  picture.height = aHeight;
+
+  // Memory allocation
+  // The memory will be freed on EndImageEncode
+  if (!WebPPictureAlloc(&picture))
+	return NS_ERROR_OUT_OF_MEMORY;
+  
+  // Setting our webp writer
+  // picture.writer = WebPMemoryWrite;
+  // picture.custom_ptr = &memory_writer;
+
+  // Set up to read the data into our image buffer, start out with an 8K
+  // estimated size. Note: we don't have to worry about freeing this data
+  // in this function. It will be freed on object destruction.
+  mImageBufferSize = 8192;
+  mImageBuffer = (uint8_t*)moz_malloc(mImageBufferSize);
+  if (!mImageBuffer) {
+    return NS_ERROR_OUT_OF_MEMORY;
+  }
+  mImageBufferUsed = 0;
+  
+  picture.custom_ptr = &memory_writer;
+  picture.writer = WebPMemoryWrite;
+
+  return NS_OK;
+
+}
+
+// Returns the number of bytes in the image buffer used.
+NS_IMETHODIMP nsWEBPEncoder::GetImageBufferUsed(uint32_t *aOutputSize)
+{
+  NS_ENSURE_ARG_POINTER(aOutputSize);
+  *aOutputSize = mImageBufferUsed;
+  return NS_OK;
+}
+
+// Returns a pointer to the start of the image buffer
+NS_IMETHODIMP nsWEBPEncoder::GetImageBuffer(char **aOutputBuffer)
+{
+  NS_ENSURE_ARG_POINTER(aOutputBuffer);
+  *aOutputBuffer = reinterpret_cast<char*>(mImageBuffer);
+  return NS_OK;
+}
+
+// TODO
+
+NS_IMETHODIMP nsWEBPEncoder::AddImageFrame(const uint8_t* aData,
+                                           uint32_t aLength,
+                                           uint32_t aWidth,
+                                           uint32_t aHeight,
+                                           uint32_t aStride,
+                                           uint32_t aInputFormat,
+                                           const nsAString& aFrameOptions)
+{
+
+  // must be initialized
+  if (mImageBuffer == nullptr)
+    return NS_ERROR_NOT_INITIALIZED;
+
+  // validate input format
+  if (aInputFormat != INPUT_FORMAT_RGB &&
+      aInputFormat != INPUT_FORMAT_RGBA &&
+      aInputFormat != INPUT_FORMAT_HOSTARGB)
+    return NS_ERROR_INVALID_ARG;
+
+  // Simple conversion first
+  size_t buffSize = sizeof(aData);
+  uint8_t* row = new uint8_t[aWidth * 4];
+  for (uint32_t y = 0; y < aHeight; y ++) {
+      ConvertHostARGBRow(&aData[y * aStride], row, aWidth, 1);
+      WebPMemoryWrite(row, buffSize, &picture);
+  }
+
+  memory_writer.mem = mImageBuffer;
+  memory_writer.size = sizeof(mImageBuffer);
+
+  picture.writer = &WriteCallback;
+
+  int success = WebPEncode(&config, &picture);
+
+  if (!success)
+    return NS_ERROR_FAILURE;
+
+  return NS_OK;
+
+}
+
+NS_IMETHODIMP nsWEBPEncoder::EndImageEncode()
+{
+
+  // must be initialized
+  if (mImageBuffer == nullptr)
+    return NS_ERROR_NOT_INITIALIZED;
+
+  // if output callback can't get enough memory, it will free our buffer
+  if (!mImageBuffer)
+    return NS_ERROR_OUT_OF_MEMORY;
+
+  WebPPictureFree(&picture);
+
+  mFinished = true;
+  NotifyListener();
+
+return NS_OK;
+
+}
+
+NS_IMETHODIMP nsWEBPEncoder::Close()
+{
+  if (mImageBuffer != nullptr) {
+    moz_free(mImageBuffer);
+    mImageBuffer = nullptr;
+    mImageBufferSize = 0;
+    mImageBufferUsed = 0;
+    mImageBufferReadPoint = 0;
+  }
+  return NS_OK;
+}
+
+NS_IMETHODIMP nsWEBPEncoder::Available(uint64_t *_retval)
+{
+  if (!mImageBuffer)
+    return NS_BASE_STREAM_CLOSED;
+
+  *_retval = mImageBufferUsed - mImageBufferReadPoint;
+  return NS_OK;
+}
+
+NS_IMETHODIMP nsWEBPEncoder::Read(char * aBuf, uint32_t aCount,
+                                 uint32_t *_retval)
+{
+  return ReadSegments(NS_CopySegmentToBuffer, aBuf, aCount, _retval);
+}
+
+/* [noscript] unsigned long readSegments (in nsWriteSegmentFun aWriter, in voidPtr aClosure, in unsigned long aCount); */
+NS_IMETHODIMP nsWEBPEncoder::ReadSegments(nsWriteSegmentFun aWriter, void *aClosure, uint32_t aCount, uint32_t *_retval)
+{
+  // Avoid another thread reallocing the buffer underneath us
+  ReentrantMonitorAutoEnter autoEnter(mReentrantMonitor);
+
+  uint32_t maxCount = mImageBufferUsed - mImageBufferReadPoint;
+  if (maxCount == 0) {
+    *_retval = 0;
+    return mFinished ? NS_OK : NS_BASE_STREAM_WOULD_BLOCK;
+  }
+
+  if (aCount > maxCount)
+    aCount = maxCount;
+  nsresult rv = aWriter(this, aClosure,
+                        reinterpret_cast<const char*>(mImageBuffer+mImageBufferReadPoint),
+                        0, aCount, _retval);
+  if (NS_SUCCEEDED(rv)) {
+    NS_ASSERTION(*_retval <= aCount, "bad write count");
+    mImageBufferReadPoint += *_retval;
+  }
+
+  // errors returned from the writer end here!
+  return NS_OK;
+}
+
+NS_IMETHODIMP nsWEBPEncoder::IsNonBlocking(bool *_retval)
+{
+  *_retval = true;
+  return NS_OK;
+}
+
+NS_IMETHODIMP nsWEBPEncoder::AsyncWait(nsIInputStreamCallback *aCallback,
+                                      uint32_t aFlags,
+                                      uint32_t aRequestedCount,
+                                      nsIEventTarget *aTarget)
+{
+  if (aFlags != 0)
+    return NS_ERROR_NOT_IMPLEMENTED;
+
+  if (mCallback || mCallbackTarget)
+    return NS_ERROR_UNEXPECTED;
+
+  mCallbackTarget = aTarget;
+  // 0 means "any number of bytes except 0"
+  mNotifyThreshold = aRequestedCount;
+  if (!aRequestedCount)
+    mNotifyThreshold = 1024; // We don't want to notify incessantly
+
+  // We set the callback absolutely last, because NotifyListener uses it to
+  // determine if someone needs to be notified.  If we don't set it last,
+  // NotifyListener might try to fire off a notification to a null target
+  // which will generally cause non-threadsafe objects to be used off the main thread
+  mCallback = aCallback;
+
+  // What we are being asked for may be present already
+  NotifyListener();
+  return NS_OK;
+}
+
+NS_IMETHODIMP nsWEBPEncoder::CloseWithStatus(nsresult aStatus)
+{
+  return Close();
+}
+
+// nsWEBPEncoder::ConvertHostARGBRow
+//
+//    Our colors are stored with premultiplied alphas, but PNGs use
+//    post-multiplied alpha. This swaps to PNG-style alpha.
+//
+//    Copied from gfx/cairo/cairo/src/cairo-png.c
+
+void
+nsWEBPEncoder::ConvertHostARGBRow(const uint8_t* aSrc, uint8_t* aDest,
+                                 uint32_t aPixelWidth,
+                                 bool aUseTransparency)
+{
+  uint32_t pixelStride = aUseTransparency ? 4 : 3;
+  for (uint32_t x = 0; x < aPixelWidth; x ++) {
+    const uint32_t& pixelIn = ((const uint32_t*)(aSrc))[x];
+    uint8_t *pixelOut = &aDest[x * pixelStride];
+
+    uint8_t alpha = (pixelIn & 0xff000000) >> 24;
+    if (alpha == 0) {
+      pixelOut[0] = pixelOut[1] = pixelOut[2] = pixelOut[3] = 0;
+    } else {
+      pixelOut[0] = (((pixelIn & 0xff0000) >> 16) * 255 + alpha / 2) / alpha;
+      pixelOut[1] = (((pixelIn & 0x00ff00) >>  8) * 255 + alpha / 2) / alpha;
+      pixelOut[2] = (((pixelIn & 0x0000ff) >>  0) * 255 + alpha / 2) / alpha;
+      if (aUseTransparency)
+        pixelOut[3] = alpha;
+    }
+  }
+}
+
+// nsWEBPEncoder::WriteCallback
+
+int // static
+nsWEBPEncoder::WriteCallback(const uint8_t* data, size_t size, const WebPPicture* const picture)
+{
+  nsWEBPEncoder* that = static_cast<nsWEBPEncoder*>(picture->custom_ptr);
+  if (! that->mImageBuffer)
+    return 0;
+
+  if (that->mImageBufferUsed + size > that->mImageBufferSize) {
+    // When we're reallocing the buffer we need to take the lock to ensure
+    // that nobody is trying to read from the buffer we are destroying
+    ReentrantMonitorAutoEnter autoEnter(that->mReentrantMonitor);
+
+    // expand buffer, just double each time
+    that->mImageBufferSize *= 2;
+    uint8_t* newBuf = (uint8_t*)moz_realloc(that->mImageBuffer,
+                                            that->mImageBufferSize);
+    if (! newBuf) {
+      // can't resize, just zero (this will keep us from writing more)
+      moz_free(that->mImageBuffer);
+      that->mImageBuffer = nullptr;
+      that->mImageBufferSize = 0;
+      that->mImageBufferUsed = 0;
+      return 0;
+    }
+    that->mImageBuffer = newBuf;
+  }
+  memcpy(&that->mImageBuffer[that->mImageBufferUsed], data, size);
+  that->mImageBufferUsed += size;
+  that->NotifyListener();
+  return 1;
+}
+
+void
+nsWEBPEncoder::NotifyListener()
+{
+  // We might call this function on multiple threads (any threads that call
+  // AsyncWait and any that do encoding) so we lock to avoid notifying the
+  // listener twice about the same data (which generally leads to a truncated
+  // image).
+  ReentrantMonitorAutoEnter autoEnter(mReentrantMonitor);
+
+  if (mCallback &&
+      (mImageBufferUsed - mImageBufferReadPoint >= mNotifyThreshold ||
+       mFinished)) {
+    nsCOMPtr<nsIInputStreamCallback> callback;
+    if (mCallbackTarget) {
+      callback = NS_NewInputStreamReadyEvent(mCallback, mCallbackTarget);
+    } else {
+      callback = mCallback;
+    }
+
+    NS_ASSERTION(callback, "Shouldn't fail to make the callback");
+    // Null the callback first because OnInputStreamReady could reenter
+    // AsyncWait
+    mCallback = nullptr;
+    mCallbackTarget = nullptr;
+    mNotifyThreshold = 0;
+
+    callback->OnInputStreamReady(this);
+  }
+}
diff -r ecaf1c5a310c -r 48f61fde85b5 image/encoders/webp/nsWEBPEncoder.h
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/image/encoders/webp/nsWEBPEncoder.h	Tue Dec 16 15:50:00 2014 +0800
@@ -0,0 +1,67 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+   * License, v. 2.0. If a copy of the MPL was not distributed with this
+   * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+  
+#include "mozilla/Attributes.h"
+#include "mozilla/ReentrantMonitor.h"
+  
+#include "imgIEncoder.h"
+
+#include "nsCOMPtr.h"
+
+#define NS_WEBPENCODER_CID \
+{ /* 05848c32-1722-462d-bb49-688dd1a63ee5 */			\
+ 	0x05848c32,						\
+	0x1722,							\
+	0x462d,							\
+       {0xbb, 0x49, 0x68, 0x8d, 0xd1, 0xa6, 0x3e, 0xe5} 	\
+}
+
+extern "C" {
+#include "webp/encode.h"
+}
+
+class nsWEBPEncoder MOZ_FINAL : public imgIEncoder
+{
+  typedef mozilla::ReentrantMonitor ReentrantMonitor;
+public:
+  NS_DECL_ISUPPORTS
+  NS_DECL_IMGIENCODER
+  NS_DECL_NSIINPUTSTREAM
+  NS_DECL_NSIASYNCINPUTSTREAM
+
+  nsWEBPEncoder();
+
+private:
+  ~nsWEBPEncoder();
+
+protected:
+
+  WebPPicture picture;
+  WebPConfig config;
+  WebPMemoryWriter memory_writer;
+
+  void NotifyListener();
+  bool mFinished;
+
+  // image buffer
+  uint8_t* mImageBuffer;
+  uint32_t mImageBufferSize;
+  uint32_t mImageBufferUsed;
+
+  uint32_t mImageBufferReadPoint;
+
+  nsCOMPtr<nsIInputStreamCallback> mCallback;
+  nsCOMPtr<nsIEventTarget> mCallbackTarget;
+  uint32_t mNotifyThreshold;
+  static int WriteCallback(const uint8_t* data, size_t size, const WebPPicture* const picture);
+  void ConvertHostARGBRow(const uint8_t* aSrc, uint8_t* aDest, uint32_t aPixelWidth, bool aUseTransparency);
+
+  /*
+    nsWEBPEncoder is designed to allow one thread to pump data into it while another
+    reads from it.  We lock to ensure that the buffer remains append-only while
+    we read from it (that it is not realloced) and to ensure that only one thread
+    dispatches a callback for each call to AsyncWait.
+   */
+  ReentrantMonitor mReentrantMonitor;
+};
diff -r ecaf1c5a310c -r 48f61fde85b5 image/src/Image.cpp
--- a/image/src/Image.cpp	Mon Aug 05 10:56:53 2013 -0700
+++ b/image/src/Image.cpp	Tue Dec 16 15:50:00 2014 +0800
@@ -69,6 +69,10 @@
   else if (!strcmp(aMimeType, IMAGE_JPG))
     rv = eDecoderType_jpeg;
 
+  // WEBP
+  else if (!strcmp(aMimeType, IMAGE_WEBP))
+    rv = eDecoderType_webp;
+
   // BMP
   else if (!strcmp(aMimeType, IMAGE_BMP))
     rv = eDecoderType_bmp;
diff -r ecaf1c5a310c -r 48f61fde85b5 image/src/Image.h
--- a/image/src/Image.h	Mon Aug 05 10:56:53 2013 -0700
+++ b/image/src/Image.h	Tue Dec 16 15:50:00 2014 +0800
@@ -27,7 +27,8 @@
     eDecoderType_bmp     = 3,
     eDecoderType_ico     = 4,
     eDecoderType_icon    = 5,
-    eDecoderType_unknown = 6
+    eDecoderType_webp    = 6,
+    eDecoderType_unknown = 7
   };
   static eDecoderType GetDecoderType(const char *aMimeType);
 
diff -r ecaf1c5a310c -r 48f61fde85b5 image/src/Makefile.in
--- a/image/src/Makefile.in	Mon Aug 05 10:56:53 2013 -0700
+++ b/image/src/Makefile.in	Tue Dec 16 15:50:00 2014 +0800
@@ -36,4 +36,4 @@
 # Because imgFrame.cpp includes "cairo.h"
 CXXFLAGS += $(MOZ_CAIRO_CFLAGS) $(MOZ_PIXMAN_CFLAGS)
 
-
+CXXFLAGS += -IE:/Mozilla/3rdLib/webp/source/build/src
diff -r ecaf1c5a310c -r 48f61fde85b5 image/src/RasterImage.cpp
--- a/image/src/RasterImage.cpp	Mon Aug 05 10:56:53 2013 -0700
+++ b/image/src/RasterImage.cpp	Tue Dec 16 15:50:00 2014 +0800
@@ -32,6 +32,7 @@
 #include "nsBMPDecoder.h"
 #include "nsICODecoder.h"
 #include "nsIconDecoder.h"
+#include "nsWEBPDecoder.h"
 
 #include "gfxContext.h"
 
@@ -1998,6 +1999,9 @@
     case eDecoderType_icon:
       mDecoder = new nsIconDecoder(*this);
       break;
+    case eDecoderType_webp:
+      mDecoder = new nsWEBPDecoder(*this);
+      break;
     default:
       NS_ABORT_IF_FALSE(0, "Shouldn't get here!");
   }
diff -r ecaf1c5a310c -r 48f61fde85b5 js/src/config/config.mk
--- a/js/src/config/config.mk	Mon Aug 05 10:56:53 2013 -0700
+++ b/js/src/config/config.mk	Tue Dec 16 15:50:00 2014 +0800
@@ -371,7 +371,7 @@
 JAVA_DIST_DIR = $(DEPTH)/$(JAVA_GEN_DIR)
 JAVA_IFACES_PKG_NAME = org/mozilla/interfaces
 
-OS_INCLUDES += $(MOZ_JPEG_CFLAGS) $(MOZ_PNG_CFLAGS) $(MOZ_ZLIB_CFLAGS)
+OS_INCLUDES += $(MOZ_JPEG_CFLAGS) $(MOZ_PNG_CFLAGS) $(MOZ_ZLIB_CFLAGS) $(MOZ_WEBP_CFLAGS)
 
 # NSPR_CFLAGS and NSS_CFLAGS must appear ahead of OS_INCLUDES to avoid Linux
 # builds wrongly picking up system NSPR/NSS header files.
diff -r ecaf1c5a310c -r 48f61fde85b5 layout/media/Makefile.in
--- a/layout/media/Makefile.in	Mon Aug 05 10:56:53 2013 -0700
+++ b/layout/media/Makefile.in	Tue Dec 16 15:50:00 2014 +0800
@@ -153,3 +153,6 @@
 endif
 
 endif
+
+LDFLAGS += -LIBPATH:E:/Mozilla/3rdLib/webp/source/build/output/release-static/x86/lib libwebp.lib
+ 
diff -r ecaf1c5a310c -r 48f61fde85b5 netwerk/mime/nsMimeTypes.h
--- a/netwerk/mime/nsMimeTypes.h	Mon Aug 05 10:56:53 2013 -0700
+++ b/netwerk/mime/nsMimeTypes.h	Tue Dec 16 15:50:00 2014 +0800
@@ -102,6 +102,7 @@
 #define IMAGE_MNG                           "video/x-mng"
 #define IMAGE_JNG                           "image/x-jng"
 #define IMAGE_SVG_XML                       "image/svg+xml"
+#define IMAGE_WEBP                          "image/webp"
 
 #define MESSAGE_EXTERNAL_BODY               "message/external-body"
 #define MESSAGE_NEWS                        "message/news"
diff -r ecaf1c5a310c -r 48f61fde85b5 toolkit/library/Makefile.in
--- a/toolkit/library/Makefile.in	Mon Aug 05 10:56:53 2013 -0700
+++ b/toolkit/library/Makefile.in	Tue Dec 16 15:50:00 2014 +0800
@@ -371,6 +371,10 @@
 EXTRA_DSO_LDOPTS += $(MOZ_PNG_LIBS)
 endif
 
+ifdef MOZ_NATIVE_WEBP
+EXTRA_DSO_LDOPTS += $(MOZ_WEBP_LIBS)
+endif
+
 ifneq (WINNT,$(OS_ARCH))
 EXTRA_DSO_LDOPTS += $(MOZ_ZLIB_LIBS)
 endif
@@ -720,4 +724,5 @@
 $(FINAL_TARGET)/dependentlibs.list: dependentlibs.py $(SHARED_LIBRARY) $(wildcard $(if $(wildcard $(FINAL_TARGET)/dependentlibs.list),$(addprefix $(FINAL_TARGET)/,$(shell cat $(FINAL_TARGET)/dependentlibs.list))))
 	$(PYTHON) $< $(SHARED_LIBRARY) -L $(FINAL_TARGET) $(if $(TOOLCHAIN_PREFIX),$(addprefix -p ,$(TOOLCHAIN_PREFIX))) > $@
 
+LDFLAGS += -LIBPATH:E:/Mozilla/3rdLib/webp/source/build/output/release-static/x86/lib libwebp.lib
 
diff -r ecaf1c5a310c -r 48f61fde85b5 uriloader/exthandler/nsExternalHelperAppService.cpp
--- a/uriloader/exthandler/nsExternalHelperAppService.cpp	Mon Aug 05 10:56:53 2013 -0700
+++ b/uriloader/exthandler/nsExternalHelperAppService.cpp	Tue Dec 16 15:50:00 2014 +0800
@@ -393,6 +393,7 @@
   { APPLICATION_RDF, "rdf" },
   { TEXT_XUL, "xul" },
   { IMAGE_PNG, "png" },
+  { IMAGE_WEBP, "webp" },
   // -- end extensions used during startup
   { TEXT_CSS, "css" },
   { IMAGE_JPEG, "jpeg" },
@@ -480,6 +481,7 @@
   { IMAGE_PNG, "png", "PNG Image" },
   { IMAGE_TIFF, "tiff,tif", "TIFF Image" },
   { IMAGE_XBM, "xbm", "XBM Image" },
+  { IMAGE_WEBP, "webp", "WEBP Image" },
   { "image/svg+xml", "svg", "Scalable Vector Graphics" },
   { MESSAGE_RFC822, "eml", "RFC-822 data" },
   { TEXT_PLAIN, "txt,text", "Text File" },
