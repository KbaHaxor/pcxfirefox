# HG changeset patch
# User xunxun1982
# Date 1413904470 -28800
#      Tue Oct 21 23:14:30 2014 +0800
# Node ID 47abf4677ed047a4691c1acf9f99c0efdfde5e7c
# Parent  8eb9290b02a2fda38414e7d801917a4e4d9005bd
Bug 616491 - Large number of groups in regex causes too-much-recursion crash (YARR)

diff -r 8eb9290b02a2 -r 47abf4677ed0 js/src/yarr/YarrPattern.cpp
--- a/js/src/yarr/YarrPattern.cpp	Tue Oct 21 22:40:13 2014 +0800
+++ b/js/src/yarr/YarrPattern.cpp	Tue Oct 21 23:14:30 2014 +0800
@@ -277,6 +277,7 @@
 public:
     YarrPatternConstructor(YarrPattern& pattern)
         : m_pattern(pattern)
+        , m_stackBase(nullptr)
         , m_characterClassConstructor(pattern.m_ignoreCase)
         , m_invertParentheticalAssertion(false)
     {
@@ -298,6 +299,22 @@
         m_alternative = m_pattern.m_body->addNewAlternative();
         m_pattern.m_disjunctions.append(m_pattern.m_body);
     }
+
+    void setStackBase(uint8_t *stackBase) {
+        m_stackBase = stackBase;
+    }
+
+    bool isOverRecursed() {
+        /*
+         * Bug 616491: attempt detection of over-recursion.
+         * "256KB should be enough stack for anyone."
+         */
+        uint8_t stackDummy_;
+        JS_ASSERT(m_stackBase != nullptr);
+        if (m_stackBase - &stackDummy_ > (1 << 18))
+            return true;
+        return false;
+    }
     
     void assertionBOL()
     {
@@ -569,6 +586,9 @@
     ErrorCode setupAlternativeOffsets(PatternAlternative* alternative, unsigned currentCallFrameSize, unsigned initialInputPosition,
                                       unsigned *callFrameSizeOut)
     {
+        if (isOverRecursed())
+            return PatternTooLarge;
+
         alternative->m_hasFixedSize = true;
         Checked<unsigned> currentInputPosition = initialInputPosition;
 
@@ -661,6 +681,9 @@
 
     ErrorCode setupDisjunctionOffsets(PatternDisjunction* disjunction, unsigned initialCallFrameSize, unsigned initialInputPosition, unsigned *maximumCallFrameSizeOut)
     {
+        if (isOverRecursed())
+            return PatternTooLarge;
+        
         if ((disjunction != m_pattern.m_body) && (disjunction->m_alternatives.size() > 1))
             initialCallFrameSize += YarrStackSpaceForBackTrackInfoAlternative;
 
@@ -836,6 +859,7 @@
 
 private:
     YarrPattern& m_pattern;
+    uint8_t * m_stackBase;
     PatternAlternative* m_alternative;
     CharacterClassConstructor m_characterClassConstructor;
     bool m_invertCharacterClass;
@@ -846,6 +870,9 @@
 {
     YarrPatternConstructor constructor(*this);
 
+    uint8_t stackDummy_;
+    constructor.setStackBase(&stackDummy_);
+
     if (ErrorCode error = parse(constructor, patternString))
         return error;
     
