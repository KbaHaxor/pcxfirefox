# HG changeset patch
# User xunxun1982
# Date 1413908112 -28800
#      Wed Oct 22 00:15:12 2014 +0800
# Node ID 535f87eb42326917c0f18f9804e1bc4ac2485689
# Parent  6e680ae81c99d0e4922e11966aa684ada3d02e4b
Bug 941837 - Reduce JS heap fragmentation. r=billm, a=lsblakk

diff -r 6e680ae81c99 -r 535f87eb4232 js/src/gc/Memory.cpp
--- a/js/src/gc/Memory.cpp	Tue Oct 21 23:54:09 2014 +0800
+++ b/js/src/gc/Memory.cpp	Wed Oct 22 00:15:12 2014 +0800
@@ -54,9 +54,9 @@
     void *p = NULL;
     while (!p) {
         /*
-         * Over-allocate in order to map a memory region that is
-         * definitely large enough then deallocate and allocate again the
-         * correct sizee, within the over-sized mapping.
+         * Over-allocate in order to map a memory region that is definitely
+         * large enough, then deallocate and allocate again the correct size,
+         * within the over-sized mapping.
          *
          * Since we're going to unmap the whole thing anyway, the first
          * mapping doesn't have to commit pages.
@@ -64,7 +64,7 @@
         p = VirtualAlloc(NULL, size * 2, MEM_RESERVE, PAGE_READWRITE);
         if (!p)
             return NULL;
-        void *chunkStart = (void *)(uintptr_t(p) + (alignment - (uintptr_t(p) % alignment)));
+        void *chunkStart = (void *)AlignBytes(uintptr_t(p), alignment);
         UnmapPages(rt, p, size * 2);
         p = VirtualAlloc(chunkStart, size, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
 
@@ -373,7 +373,7 @@
     uintptr_t offset = uintptr_t(region) % alignment;
     JS_ASSERT(offset < reqSize - size);
 
-    void *front = (void *)(uintptr_t(region) + (alignment - offset));
+    void *front = (void *)AlignBytes(uintptr_t(region), alignment);
     void *end = (void *)(uintptr_t(front) + size);
     if (front != region)
         JS_ALWAYS_TRUE(0 == munmap(region, alignment - offset));
