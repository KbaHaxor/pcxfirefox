# HG changeset patch
# User Kyle Machulis <kyle@nonpolynomial.com>
# Date 1449677088 -3600
#      Wed Dec 09 17:04:48 2015 +0100
# Branch GECKO4301_2015121620_RELBRANCH
# Node ID 1b87d9d2373a494949c324a6ddc93dcefc44b8ad
# Parent  4fe9ed4ed5101b6a4ccac836cd1bbd3a7409c6a5
Bug 1221448 - fix for Leak instead of crashing on off-main-thread NPAPI _releaseobject. r=bsmedberg, a=sylvestre

diff --git a/dom/plugins/base/nsNPAPIPlugin.cpp b/dom/plugins/base/nsNPAPIPlugin.cpp
--- a/dom/plugins/base/nsNPAPIPlugin.cpp
+++ b/dom/plugins/base/nsNPAPIPlugin.cpp
@@ -1248,22 +1248,31 @@ NPObject*
   }
 
   return npobj;
 }
 
 void
 _releaseobject(NPObject* npobj)
 {
+  // If nothing is passed, just return, even if we're on the wrong thread.
+  if (!npobj) {
+    return;
+  }
+
+  // If releaseobject is called off the main thread and we have a valid pointer,
+  // we at least know it was created on the main thread (see _createobject
+  // implementation). However, forwarding the deletion back to the main thread
+  // without careful checking could cause bad memory management races. So, for
+  // now, we leak by warning and then just returning early. But it should fix
+  // java 7 crashes.
   if (!NS_IsMainThread()) {
     NPN_PLUGIN_LOG(PLUGIN_LOG_ALWAYS,("NPN_releaseobject called from the wrong thread\n"));
-    MOZ_CRASH("NPN_releaseobject called from the wrong thread");
+    return;
   }
-  if (!npobj)
-    return;
 
   int32_t refCnt = PR_ATOMIC_DECREMENT((int32_t*)&npobj->referenceCount);
   NS_LOG_RELEASE(npobj, refCnt, "BrowserNPObject");
 
   if (refCnt == 0) {
     nsNPObjWrapper::OnDestroy(npobj);
 
     NPN_PLUGIN_LOG(PLUGIN_LOG_NOISY,
