# HG changeset patch
# User xunxun1982
# Date 1411897577 -28800
#      Sun Sep 28 17:46:17 2014 +0800
# Branch GECKO340b9_2014111321_RELBRANCH
# Node ID f2bbbf7914e55f47d67d6e5588f34cff70d5620d
# Parent  1baad0ab19c69a62be23083d96610da91d4cabe9
Bug 1060703 - Use XPCOM's event loop instead of chromium's in NS_INLINE_DECL_THREADSAFE_REFCOUNTING_WITH_MAIN_THREAD_DESTRUCTION. r=bjacob

diff -r 1baad0ab19c6 -r f2bbbf7914e5 gfx/layers/ipc/ThreadSafeRefcountingWithMainThreadDestruction.h
--- a/gfx/layers/ipc/ThreadSafeRefcountingWithMainThreadDestruction.h	Sat Sep 27 22:45:30 2014 +0800
+++ b/gfx/layers/ipc/ThreadSafeRefcountingWithMainThreadDestruction.h	Sun Sep 28 17:46:17 2014 +0800
@@ -6,8 +6,7 @@
 #define THREADSAFEREFCOUNTINGWITHMAINTHREADDESTRUCTION_H_
 
 #include "MainThreadUtils.h"
-#include "base/message_loop.h"
-#include "base/task.h"
+#include "nsThreadUtils.h"
 
 namespace mozilla {
 namespace layers {
@@ -38,6 +37,18 @@
   }
 };
 
+template<typename T>
+struct DeleteOnMainThreadTask: public nsRunnable
+{
+  T* mToDelete;
+  DeleteOnMainThreadTask(T* aToDelete) : mToDelete(aToDelete) {}
+  NS_IMETHOD Run() {
+    MOZ_ASSERT(NS_IsMainThread());
+    mToDelete->DeleteToBeCalledOnMainThread();
+    return NS_OK;
+  }
+};
+
 } // namespace layers
 } // namespace mozilla
 
@@ -50,24 +61,20 @@
     NS_LOG_ADDREF(this, count, #_class, sizeof(*this));                       \
     return (nsrefcnt) count;                                                  \
   }                                                                           \
-  static void DestroyToBeCalledOnMainThread(_class* ptr) {                    \
+  void DeleteToBeCalledOnMainThread() {                                       \
     MOZ_ASSERT(NS_IsMainThread());                                            \
-    NS_LOG_RELEASE(ptr, 0, #_class);                                          \
-    delete ptr;                                                               \
+    NS_LOG_RELEASE(this, 0, #_class);                                         \
+    delete this;                                                              \
   }                                                                           \
   NS_METHOD_(MozExternalRefCountType) Release(void) {                         \
     MOZ_ASSERT(int32_t(mRefCnt) > 0, "dup release");                          \
     nsrefcnt count = --mRefCnt;                                               \
     if (count == 0) {                                                         \
       if (NS_IsMainThread()) {                                                \
-        NS_LOG_RELEASE(this, 0, #_class);                                     \
-        delete this;                                                          \
+        DeleteToBeCalledOnMainThread();                                       \
       } else {                                                                \
-        /* no NS_LOG_RELEASE here, will be in the runnable */                 \
-        MessageLoop *l = ::mozilla::layers::GetMainLoop();                    \
-        l->PostTask(FROM_HERE,                                                \
-                    NewRunnableFunction(&DestroyToBeCalledOnMainThread,       \
-                                        this));                               \
+        NS_DispatchToMainThread(                                              \
+          new mozilla::layers::DeleteOnMainThreadTask<_class>(this));         \
       }                                                                       \
     } else {                                                                  \
       NS_LOG_RELEASE(this, count, #_class);                                   \
