# HG changeset patch
# User Michal Novotny <michal.novotny@gmail.com>
# Date 1423736930 -3600
#      Thu Feb 12 11:28:50 2015 +0100
# Node ID a565a223d142523e1a2b60ad62d7fbf72ae49f42
# Parent  20ed37d4f4a02aea3137efb8c30bdd531d685652
Bug 1130784 - FAT32 file create limit code is using a bad error number. r=honzab, a=sledru

diff -r 20ed37d4f4a0 -r a565a223d142 netwerk/cache2/CacheFileIOManager.cpp
--- a/netwerk/cache2/CacheFileIOManager.cpp	Thu Feb 19 19:54:49 2015 +0800
+++ b/netwerk/cache2/CacheFileIOManager.cpp	Thu Feb 12 11:28:50 2015 +0100
@@ -2608,7 +2608,7 @@
     SHA1Sum::Hash hash;
     uint32_t cnt;
     static uint32_t consecutiveFailures = 0;
-    rv = CacheIndex::GetEntryForEviction(&hash, &cnt);
+    rv = CacheIndex::GetEntryForEviction(false, &hash, &cnt);
     NS_ENSURE_SUCCESS(rv, rv);
 
     rv = DoomFileByKeyInternal(&hash, true);
@@ -3596,7 +3596,8 @@
   if (aCreate) {
     rv = aHandle->mFile->OpenNSPRFileDesc(
            PR_RDWR | PR_CREATE_FILE | PR_TRUNCATE, 0600, &aHandle->mFD);
-    if (rv == NS_ERROR_FILE_NO_DEVICE_SPACE) {
+    if (rv == NS_ERROR_FILE_ALREADY_EXISTS ||  // error from nsLocalFileWin
+        rv == NS_ERROR_FILE_NO_DEVICE_SPACE) { // error from nsLocalFileUnix
       LOG(("CacheFileIOManager::OpenNSPRHandle() - Cannot create a new file, we"
            " might reached a limit on FAT32. Will evict a single entry and try "
            "again. [hash=%08x%08x%08x%08x%08x]", LOGSHA1(aHandle->Hash())));
@@ -3604,7 +3605,7 @@
       SHA1Sum::Hash hash;
       uint32_t cnt;
 
-      rv = CacheIndex::GetEntryForEviction(&hash, &cnt);
+      rv = CacheIndex::GetEntryForEviction(true, &hash, &cnt);
       if (NS_SUCCEEDED(rv)) {
         rv = DoomFileByKeyInternal(&hash, true);
       }
diff -r 20ed37d4f4a0 -r a565a223d142 netwerk/cache2/CacheIndex.cpp
--- a/netwerk/cache2/CacheIndex.cpp	Thu Feb 19 19:54:49 2015 +0800
+++ b/netwerk/cache2/CacheIndex.cpp	Thu Feb 12 11:28:50 2015 +0100
@@ -1171,7 +1171,7 @@
 
 // static
 nsresult
-CacheIndex::GetEntryForEviction(SHA1Sum::Hash *aHash, uint32_t *aCnt)
+CacheIndex::GetEntryForEviction(bool aIgnoreEmptyEntries, SHA1Sum::Hash *aHash, uint32_t *aCnt)
 {
   LOG(("CacheIndex::GetEntryForEviction()"));
 
@@ -1204,11 +1204,17 @@
     if (index->mExpirationArray[i]->mExpirationTime < now) {
       memcpy(&hash, &index->mExpirationArray[i]->mHash, sizeof(SHA1Sum::Hash));
 
-      if (!IsForcedValidEntry(&hash)) {
-        foundEntry = true;
-        break;
+      if (IsForcedValidEntry(&hash)) {
+        continue;
       }
 
+      if (aIgnoreEmptyEntries &&
+          !CacheIndexEntry::GetFileSize(index->mExpirationArray[i])) {
+        continue;
+      }
+
+      foundEntry = true;
+      break;
     } else {
       // all further entries have not expired yet
       break;
@@ -1233,10 +1239,17 @@
     for (j = 0; j < index->mFrecencyArray.Length(); j++) {
       memcpy(&hash, &index->mFrecencyArray[j]->mHash, sizeof(SHA1Sum::Hash));
 
-      if (!IsForcedValidEntry(&hash)) {
-        foundEntry = true;
-        break;
+      if (IsForcedValidEntry(&hash)) {
+        continue;
       }
+
+      if (aIgnoreEmptyEntries &&
+          !CacheIndexEntry::GetFileSize(index->mFrecencyArray[j])) {
+        continue;
+      }
+
+      foundEntry = true;
+      break;
     }
 
     if (!foundEntry)
diff -r 20ed37d4f4a0 -r a565a223d142 netwerk/cache2/CacheIndex.h
--- a/netwerk/cache2/CacheIndex.h	Thu Feb 19 19:54:49 2015 +0800
+++ b/netwerk/cache2/CacheIndex.h	Thu Feb 12 11:28:50 2015 +0100
@@ -641,7 +641,7 @@
   // cache size is over limit and also returns a total number of all entries in
   // the index minus the number of forced valid entries that we encounter
   // when searching (see below)
-  static nsresult GetEntryForEviction(SHA1Sum::Hash *aHash, uint32_t *aCnt);
+  static nsresult GetEntryForEviction(bool aIgnoreEmptyEntries, SHA1Sum::Hash *aHash, uint32_t *aCnt);
 
   // Checks if a cache entry is currently forced valid. Used to prevent an entry
   // (that has been forced valid) from being evicted when the cache size reaches
